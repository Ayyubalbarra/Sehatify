{"ast":null,"code":"// apps/admin/frontend/src/services/api.ts\n\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\",\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data, _error$response2;\n  const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || \"An error occurred\";\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    if (window.location.pathname !== '/login') {\n      window.location.href = \"/login\";\n    }\n    toast.error(\"Sesi berakhir. Silakan login kembali.\");\n  } else if (error.code !== \"ERR_CANCELED\") {\n    toast.error(message);\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post(\"/auth/admin/login\", credentials);\n    return response.data;\n  },\n  demoLogin: async () => {\n    const response = await api.post(\"/auth/admin/demo-login\");\n    return response.data;\n  },\n  verifyToken: async () => {\n    const response = await api.get(\"/auth/admin/verify-token\");\n    return response.data;\n  },\n  updateProfile: async userData => {\n    const response = await api.put(\"/auth/admin/profile\", userData);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get(\"/auth/admin/profile\");\n    return response.data;\n  }\n};\nexport const patientAPI = {\n  getPatients: async (page = 1, limit = 10, search = \"\", status = \"all\") => {\n    const response = await api.get(\"/patients\", {\n      params: {\n        page,\n        limit,\n        search,\n        status\n      }\n    });\n    return response.data;\n  },\n  getPatientStats: async () => {\n    const response = await api.get(\"/patients/stats\");\n    return response.data;\n  },\n  createPatient: async patientData => {\n    const response = await api.post(\"/patients\", patientData);\n    return response.data;\n  },\n  updatePatient: async (patientId, patientData) => {\n    const response = await api.put(`/patients/${patientId}`, patientData);\n    return response.data;\n  },\n  deletePatient: async patientId => {\n    const response = await api.delete(`/patients/${patientId}`);\n    return response.data;\n  },\n  getPatientById: async patientId => {\n    const response = await api.get(`/patients/${patientId}`);\n    return response.data;\n  }\n};\nexport const dashboardAPI = {\n  getOverview: async () => {\n    const response = await api.get(\"/dashboard/overview\");\n    return response.data;\n  },\n  getChartData: async type => {\n    const response = await api.get(`/dashboard/charts?type=${type}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","toast","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response$data","_error$response2","message","data","status","removeItem","window","location","pathname","href","code","authAPI","login","credentials","post","demoLogin","verifyToken","get","updateProfile","userData","put","getProfile","patientAPI","getPatients","page","limit","search","params","getPatientStats","createPatient","patientData","updatePatient","patientId","deletePatient","delete","getPatientById","dashboardAPI","getOverview","getChartData","type"],"sources":["C:/Sehatify/apps/admin/frontend/src/services/api.ts"],"sourcesContent":["// apps/admin/frontend/src/services/api.ts\n\nimport axios, { type AxiosInstance, type AxiosResponse, type AxiosError } from \"axios\"\nimport toast from \"react-hot-toast\"\nimport type {\n  ApiResponse,\n  User, \n  AuthResponse,\n  LoginCredentials,\n} from \"../types\" \n\nexport interface PatientData { \n  _id: string;\n  patientId?: string; // patientId dari Patient.ts yang lama, atau bisa dihapus jika hanya _id yang relevan\n  fullName: string; // Menggunakan fullName sesuai PatientUser.model\n  nik?: string; // Opsional jika tidak ada di PatientUser.model\n  dateOfBirth: string;\n  gender: 'Laki-laki' | 'Perempuan';\n  phone: string;\n  email?: string;\n  address?: {\n    street?: string;\n    city?: string;\n    province?: string;\n    postalCode?: string;\n  };\n  bloodType?: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-';\n  allergies?: string[];\n  emergencyContact?: {\n    name?: string;\n    relationship?: string;\n    phone?: string;\n  };\n  registrationDate: string;\n  status: 'Active' | 'Inactive'; // Jika PatientUser punya status\n  lastVisit?: string;\n  age?: number;\n  recentVisits?: any[]; \n  lifetimeValue?: number;\n}\n\nexport interface PatientStatsData {\n  total: number;\n  active: number;\n  new: number;\n  genderStats: Array<{ _id: string; count: number }>;\n}\n\nexport interface PatientsApiResponse {\n  success: boolean;\n  data: PatientData[]; \n  pagination: { currentPage: number; totalPages: number; total: number }; \n}\n\nexport interface PatientStatsApiResponse {\n  success: boolean;\n  data: PatientStatsData;\n}\n\n\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\", \n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    const message = (error.response?.data as any)?.message || error.message || \"An error occurred\"\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      if (window.location.pathname !== '/login') {\n        window.location.href = \"/login\"\n      }\n      toast.error(\"Sesi berakhir. Silakan login kembali.\")\n    } else if (error.code !== \"ERR_CANCELED\") {\n        toast.error(message)\n    }\n    return Promise.reject(error)\n  },\n)\n\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/login\", credentials) \n    return response.data\n  },\n  demoLogin: async (): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/demo-login\") \n    return response.data\n  },\n  verifyToken: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/verify-token\")\n    return response.data\n  },\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.put<ApiResponse<{ user: User }>>(\"/auth/admin/profile\", userData)\n    return response.data\n  },\n  getProfile: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/profile\")\n    return response.data\n  },\n}\n\nexport const patientAPI = {\n  getPatients: async (\n    page: number = 1, \n    limit: number = 10, \n    search: string = \"\", \n    status: string = \"all\"\n  ): Promise<PatientsApiResponse> => {\n    const response = await api.get<PatientsApiResponse>(\"/patients\", {\n      params: { page, limit, search, status }\n    });\n    return response.data;\n  },\n  getPatientStats: async (): Promise<PatientStatsApiResponse> => {\n    const response = await api.get<PatientStatsApiResponse>(\"/patients/stats\");\n    return response.data;\n  },\n  createPatient: async (patientData: any): Promise<ApiResponse<PatientData>> => {\n    const response = await api.post<ApiResponse<PatientData>>(\"/patients\", patientData);\n    return response.data;\n  },\n  updatePatient: async (patientId: string, patientData: any): Promise<ApiResponse<PatientData>> => {\n    const response = await api.put<ApiResponse<PatientData>>(`/patients/${patientId}`, patientData);\n    return response.data;\n  },\n  deletePatient: async (patientId: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete<ApiResponse<null>>(`/patients/${patientId}`);\n    return response.data;\n  },\n  getPatientById: async (patientId: string): Promise<ApiResponse<PatientData>> => {\n    const response = await api.get<ApiResponse<PatientData>>(`/patients/${patientId}`);\n    return response.data;\n  }\n}\n\nexport const dashboardAPI = {\n  getOverview: async (): Promise<ApiResponse<any>> => {\n    const response = await api.get<ApiResponse<any>>(\"/dashboard/overview\")\n    return response.data\n  },\n  getChartData: async (type: string): Promise<ApiResponse<any>> => {\n    const response = await api.get<ApiResponse<any>>(`/dashboard/charts?type=${type}`)\n    return response.data\n  },\n}\n\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}