{"ast":null,"code":"// apps/admin/frontend/src/services/api.ts\n\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\n// type User, AuthResponse, LoginCredentials akan diimpor dari ../types jika ada\n// Jika tidak ada, Anda bisa definisikan di sini atau di file types terpisah\n\n// =========================================================\n// INTERFACES GLOBAL DAN UTAMA (Admin Frontend)\n// Urutan penting untuk referensi antar interface\n\n// 1. Interfaces Dokter (dasar untuk referensi di Polyclinic dan Schedule)\n\n// 2. Interfaces Poliklinik (digunakan di Schedule dan mungkin Patient)\n\n// 3. Interfaces Pasien\n\n// 4. Interfaces Jadwal\n\n// 5. Interfaces Inventaris\n\n// 6. Interfaces untuk Laporan & Analisis\n// ChartDataForRecharts akan digunakan untuk kedua chart (line dan bar) di frontend LaporanAnalisis\n\n// =========================================================\n// AXIOS INSTANCE\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\",\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data, _error$response2;\n  const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || \"An error occurred\";\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    if (window.location.pathname !== '/login') {\n      window.location.href = \"/login\";\n    }\n    toast.error(\"Sesi berakhir. Silakan login kembali.\");\n  } else if (error.code !== \"ERR_CANCELED\") {\n    toast.error(message);\n  }\n  return Promise.reject(error);\n});\n\n// =========================================================\n// API SERVICES\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post(\"/auth/admin/login\", credentials);\n    return response.data;\n  },\n  demoLogin: async () => {\n    const response = await api.post(\"/auth/admin/demo-login\");\n    return response.data;\n  },\n  verifyToken: async () => {\n    const response = await api.get(\"/auth/admin/verify-token\");\n    return response.data;\n  },\n  updateProfile: async userData => {\n    const response = await api.put(\"/auth/admin/profile\", userData);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get(\"/auth/admin/profile\");\n    return response.data;\n  }\n};\nexport const patientAPI = {\n  getPatients: async (page = 1, limit = 10, search = \"\", status = \"all\") => {\n    const response = await api.get(\"/patients\", {\n      params: {\n        page,\n        limit,\n        search,\n        status\n      }\n    });\n    return response.data;\n  },\n  getPatientStats: async () => {\n    const response = await api.get(\"/patients/stats\");\n    return response.data;\n  },\n  createPatient: async patientData => {\n    const response = await api.post(\"/patients\", patientData);\n    return response.data;\n  },\n  updatePatient: async (patientId, patientData) => {\n    const response = await api.put(`/patients/${patientId}`, patientData);\n    return response.data;\n  },\n  deletePatient: async patientId => {\n    const response = await api.delete(`/patients/${patientId}`);\n    return response.data;\n  },\n  getPatientById: async patientId => {\n    const response = await api.get(`/patients/${patientId}`);\n    return response.data;\n  }\n};\nexport const dashboardAPI = {\n  getOverview: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/overview\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  // PERBAIKAN: Ubah return type menjadi Array of ChartDataForRecharts\n  getChartData: async (type = 'weekly-patients', period = '30d') => {\n    const response = await api.get(`/dashboard/charts?type=${type}`, {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  getFinancialSummary: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/stats/financial\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  getServiceDistribution: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/stats/service-distribution\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  }\n};\nexport const polyclinicAPI = {\n  getAllPolyclinics: async (page = 1, limit = 10, search = \"\", department = \"\") => {\n    const response = await api.get(\"/polyclinics\", {\n      params: {\n        page,\n        limit,\n        search,\n        department\n      }\n    });\n    return response.data;\n  }\n};\nexport const inventoryAPI = {\n  getInventoryItems: async (page = 1, limit = 10, search = \"\", category = \"\", status = \"\", sortBy = 'name', sortOrder = 'asc') => {\n    const response = await api.get(\"/inventory\", {\n      params: {\n        page,\n        limit,\n        search,\n        category,\n        status,\n        sortBy,\n        sortOrder\n      }\n    });\n    return response.data;\n  },\n  getInventoryStats: async () => {\n    const response = await api.get(\"/inventory/stats\");\n    return response.data;\n  },\n  createInventoryItem: async itemData => {\n    const response = await api.post(\"/inventory\", itemData);\n    return response.data;\n  },\n  updateInventoryItem: async (itemId, itemData) => {\n    const response = await api.put(`/inventory/${itemId}`, itemData);\n    return response.data;\n  },\n  deleteInventoryItem: async itemId => {\n    const response = await api.delete(`/inventory/${itemId}`);\n    return response.data;\n  },\n  updateStock: async (itemId, quantity, type) => {\n    const response = await api.put(`/inventory/${itemId}/stock`, {\n      quantity,\n      type\n    });\n    return response.data;\n  },\n  getLowStockAlerts: async () => {\n    const response = await api.get(\"/inventory/alerts/low-stock\");\n    return response.data;\n  }\n};\nexport const scheduleAPI = {\n  getAllSchedules: async (page = 1, limit = 10, doctorId, polyclinicId, date, status) => {\n    const response = await api.get(\"/schedules\", {\n      params: {\n        page,\n        limit,\n        doctorId,\n        polyclinicId,\n        date,\n        status\n      }\n    });\n    return response.data;\n  },\n  getScheduleById: async id => {\n    const response = await api.get(`/schedules/${id}`);\n    return response.data;\n  },\n  createSchedule: async scheduleData => {\n    const response = await api.post(\"/schedules\", scheduleData);\n    return response.data;\n  },\n  updateSchedule: async (id, scheduleData) => {\n    const response = await api.put(`/schedules/${id}`, scheduleData);\n    return response.data;\n  },\n  deleteSchedule: async id => {\n    const response = await api.delete(`/schedules/${id}`);\n    return response.data;\n  },\n  getScheduleStats: async () => {\n    console.warn(\"Schedule stats API is not fully implemented in backend.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: {\n        totalSchedules: 100,\n        activeSchedules: 80,\n        totalSlotsToday: 200,\n        bookedSlotsToday: 150,\n        availableSlotsToday: 50,\n        utilizationToday: 75,\n        doctorsOnDutyToday: 10,\n        newAppointmentsToday: 15,\n        averageWaitTimeToday: 20\n      }\n    }), 500));\n  }\n};\nexport const doctorAPI = {\n  getDoctors: async (page = 1, limit = 10, search = \"\", specialization = \"\", status = \"active\", sortBy = 'name', sortOrder = 'asc') => {\n    const response = await api.get(\"/doctors\", {\n      params: {\n        page,\n        limit,\n        search,\n        specialization,\n        status,\n        sortBy,\n        sortOrder\n      }\n    });\n    return response.data;\n  },\n  getDoctorById: async id => {\n    const response = await api.get(`/doctors/${id}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","toast","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response$data","_error$response2","message","data","status","removeItem","window","location","pathname","href","code","authAPI","login","credentials","post","demoLogin","verifyToken","get","updateProfile","userData","put","getProfile","patientAPI","getPatients","page","limit","search","params","getPatientStats","createPatient","patientData","updatePatient","patientId","deletePatient","delete","getPatientById","dashboardAPI","getOverview","period","getChartData","type","getFinancialSummary","getServiceDistribution","polyclinicAPI","getAllPolyclinics","department","inventoryAPI","getInventoryItems","category","sortBy","sortOrder","getInventoryStats","createInventoryItem","itemData","updateInventoryItem","itemId","deleteInventoryItem","updateStock","quantity","getLowStockAlerts","scheduleAPI","getAllSchedules","doctorId","polyclinicId","date","getScheduleById","id","createSchedule","scheduleData","updateSchedule","deleteSchedule","getScheduleStats","console","warn","resolve","setTimeout","success","totalSchedules","activeSchedules","totalSlotsToday","bookedSlotsToday","availableSlotsToday","utilizationToday","doctorsOnDutyToday","newAppointmentsToday","averageWaitTimeToday","doctorAPI","getDoctors","specialization","getDoctorById"],"sources":["C:/Sehatify/apps/admin/frontend/src/services/api.ts"],"sourcesContent":["// apps/admin/frontend/src/services/api.ts\n\nimport axios, { type AxiosInstance, type AxiosResponse, type AxiosError } from \"axios\"\nimport toast from \"react-hot-toast\"\n// type User, AuthResponse, LoginCredentials akan diimpor dari ../types jika ada\n// Jika tidak ada, Anda bisa definisikan di sini atau di file types terpisah\nimport type { User, AuthResponse, LoginCredentials, ApiResponse } from \"../types\" \n\n// =========================================================\n// INTERFACES GLOBAL DAN UTAMA (Admin Frontend)\n// Urutan penting untuk referensi antar interface\n\n// 1. Interfaces Dokter (dasar untuk referensi di Polyclinic dan Schedule)\nexport interface DoctorDataFromAdminAPI { \n  _id: string; // MongoDB ID\n  name: string;\n  specialization: string;\n  employeeId?: string;\n  phone?: string;\n  email?: string;\n  licenseNumber?: string;\n  joinDate?: string; \n  status?: 'Active' | 'On Leave' | 'Inactive'; \n  isActive?: boolean; \n}\n\nexport interface DoctorListApiResponse {\n  success: boolean;\n  data: DoctorDataFromAdminAPI[];\n  pagination: { currentPage: number; totalPages: number; total: number; };\n}\n\n// 2. Interfaces Poliklinik (digunakan di Schedule dan mungkin Patient)\nexport interface PolyclinicData {\n  _id: string;\n  polyclinicId: string;\n  name: string; \n  department: string; \n  description?: string;\n  operatingHours?: {\n    [day: string]: { start?: string; end?: string; isOpen?: boolean };\n  };\n  capacity?: {\n    maxPatientsPerDay?: number;\n    maxPatientsPerHour?: number;\n  };\n  facilities?: string[];\n  location?: {\n    building?: string;\n    floor?: string;\n    room?: string;\n  };\n  // assignedDoctors bisa berupa array dari objek populated atau hanya string ID\n  assignedDoctors?: Array<{\n    _id?: string; \n    doctorId?: string | DoctorDataFromAdminAPI; // DoctorDataFromAdminAPI sudah dikenal\n    schedule?: Array<{ day?: string; startTime?: string; endTime?: string; }>;\n  }>;\n  status: 'Active' | 'Maintenance' | 'Closed';\n  stats?: {\n    monthlyVisits: number;\n    activeDoctors: number;\n  };\n  price?: number; \n}\n\nexport interface PolyclinicsApiResponse {\n  success: boolean;\n  data: PolyclinicData[];\n  pagination: { currentPage: number; totalPages: number; total: number };\n}\n\nexport interface PolyclinicStatsData {\n  totalServices: number; \n  activeToday: number; \n  averageWaitTime: number; \n}\n\nexport interface PolyclinicStatsApiResponse {\n  success: boolean;\n  data: PolyclinicStatsData;\n}\n\n\n// 3. Interfaces Pasien\nexport interface PatientData { \n  _id: string; // _id adalah wajib jika PatientData merepresentasikan data dari DB\n  patientId?: string; \n  fullName: string; \n  nik?: string; \n  dateOfBirth: string;\n  gender: 'Laki-laki' | 'Perempuan';\n  phone: string;\n  email?: string; \n  address?: {\n    street?: string;\n    city?: string;\n    province?: string;\n    postalCode?: string;\n  };\n  bloodType?: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-';\n  allergies?: string[];\n  emergencyContact?: {\n    name?: string;\n    relationship?: string;\n    phone?: string;\n  };\n  registrationDate?: string; \n  status?: 'Active' | 'Inactive'; \n  lastVisit?: string;\n  age?: number;\n  recentVisits?: any[]; \n  lifetimeValue?: number;\n  createdAt?: string; \n  updatedAt?: string; \n}\n\nexport interface PatientStatsData {\n  total: number;\n  active: number;\n  new: number;\n  genderStats: Array<{ _id: string; count: number }>;\n}\n\nexport interface PatientsApiResponse {\n  success: boolean;\n  data: PatientData[]; \n  pagination: { currentPage: number; totalPages: number; total: number }; \n}\n\nexport interface PatientStatsApiResponse {\n  success: boolean;\n  data: PatientStatsData;\n}\n\n\n// 4. Interfaces Jadwal\nexport interface ScheduleData {\n  _id: string; \n  scheduleId: string; \n  doctorId: string | DoctorDataFromAdminAPI; \n  polyclinicId: string | PolyclinicData; \n  date: string; \n  startTime: string; \n  endTime: string; \n  totalSlots: number;\n  bookedSlots: number;\n  availableSlots: number;\n  status: 'Active' | 'Cancelled' | 'Completed';\n  notes?: string;\n  estimatedWaitTime?: number;\n  createdAt?: string;\n  updatedAt?: string;\n  doctorName?: string; \n  doctorSpecialization?: string; \n  polyclinicName?: string; \n  queues?: Array<{ \n    _id: string;\n    patientId: { fullName: string; patientId?: string } | null;\n    queueNumber: number;\n    status: string;\n  }>;\n}\n\nexport interface ScheduleApiResponse {\n  success: boolean;\n  data: ScheduleData[];\n  pagination: { currentPage: number; totalPages: number; total: number };\n}\n\nexport interface SingleScheduleApiResponse {\n  success: boolean;\n  data: ScheduleData; \n}\n\nexport interface ScheduleStatsResponse {\n  success: boolean;\n  data: {\n    totalSchedules: number;\n    activeSchedules: number;\n    totalSlotsToday: number;\n    bookedSlotsToday: number;\n    availableSlotsToday: number;\n    utilizationToday: number; \n    doctorsOnDutyToday: number;\n    newAppointmentsToday: number;\n    averageWaitTimeToday: number;\n  }\n}\n\n// 5. Interfaces Inventaris\nexport interface InventoryItemData { \n  _id: string; \n  itemId: string; \n  name: string;\n  category: string;\n  currentStock: number;\n  minimumStock: number;\n  unit: string;\n  unitPrice: number;\n  status: 'Available' | 'Low Stock' | 'Out of Stock';\n  lastRestockDate?: string; \n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface InventoryStatsData {\n  total: number; \n  lowStock: number;\n  outOfStock: number;\n  totalValue: number;\n}\n\nexport interface InventoryApiResponse {\n  success: boolean;\n  data: InventoryItemData[]; \n  pagination: { currentPage: number; totalPages: number; total: number };\n}\n\nexport interface InventoryStatsApiResponse {\n  success: boolean;\n  data: InventoryStatsData;\n}\n\n\n// 6. Interfaces untuk Laporan & Analisis\n// ChartDataForRecharts akan digunakan untuk kedua chart (line dan bar) di frontend LaporanAnalisis\nexport interface ChartDataForRecharts { \n  name: string; // Label untuk sumbu X (misal: \"Jan\", \"Poli Umum\")\n  value: number; // Nilai untuk sumbu Y (misal: jumlah kunjungan, jumlah distribusi)\n  // Anda bisa menambahkan properti lain jika dibutuhkan oleh chart, misal: color\n  color?: string;\n}\n\nexport interface FinancialSummaryData {\n  totalRevenue: number;\n  operationalCost: number;\n  profitMargin: number;\n  patientSatisfaction: number;\n}\n\nexport interface ServiceDistributionData { \n  name: string;\n  value: number;\n  color?: string;\n}\n\nexport interface DashboardOverviewApiData {\n  totalVisits: number;\n  averageDaily: number;\n  occupancyRate: number;\n}\n\n\n// =========================================================\n// AXIOS INSTANCE\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\", \n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    const message = (error.response?.data as any)?.message || error.message || \"An error occurred\"\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      if (window.location.pathname !== '/login') {\n        window.location.href = \"/login\"\n      }\n      toast.error(\"Sesi berakhir. Silakan login kembali.\")\n    } else if (error.code !== \"ERR_CANCELED\") {\n        toast.error(message)\n    }\n    return Promise.reject(error)\n  },\n)\n\n// =========================================================\n// API SERVICES\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/login\", credentials) \n    return response.data\n  },\n  demoLogin: async (): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/demo-login\") \n    return response.data\n  },\n  verifyToken: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/verify-token\")\n    return response.data\n  },\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.put<ApiResponse<{ user: User }>>(\"/auth/admin/profile\", userData)\n    return response.data\n  },\n  getProfile: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/profile\")\n    return response.data\n  },\n}\n\nexport const patientAPI = {\n  getPatients: async (\n    page: number = 1, \n    limit: number = 10, \n    search: string = \"\", \n    status: string = \"all\"\n  ): Promise<PatientsApiResponse> => {\n    const response = await api.get<PatientsApiResponse>(\"/patients\", {\n      params: { page, limit, search, status }\n    });\n    return response.data;\n  },\n  getPatientStats: async (): Promise<PatientStatsApiResponse> => {\n    const response = await api.get<PatientStatsApiResponse>(\"/patients/stats\");\n    return response.data;\n  },\n  createPatient: async (patientData: Omit<PatientData, '_id' | 'patientId' | 'registrationDate' | 'status' | 'lastVisit' | 'age' | 'createdAt' | 'updatedAt'>): Promise<ApiResponse<PatientData>> => {\n    const response = await api.post<ApiResponse<PatientData>>(\"/patients\", patientData);\n    return response.data;\n  },\n  updatePatient: async (patientId: string, patientData: Partial<PatientData>): Promise<ApiResponse<PatientData>> => { \n    const response = await api.put<ApiResponse<PatientData>>(`/patients/${patientId}`, patientData);\n    return response.data;\n  },\n  deletePatient: async (patientId: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete<ApiResponse<null>>(`/patients/${patientId}`);\n    return response.data;\n  },\n  getPatientById: async (patientId: string): Promise<ApiResponse<PatientData>> => {\n    const response = await api.get<ApiResponse<PatientData>>(`/patients/${patientId}`);\n    return response.data;\n  }\n}\n\nexport const dashboardAPI = {\n  getOverview: async (period: string = '30d'): Promise<ApiResponse<DashboardOverviewApiData>> => { \n    const response = await api.get<ApiResponse<DashboardOverviewApiData>>(\"/dashboard/overview\", { params: { period } });\n    return response.data;\n  },\n  // PERBAIKAN: Ubah return type menjadi Array of ChartDataForRecharts\n  getChartData: async (type: string = 'weekly-patients', period: string = '30d'): Promise<ApiResponse<ChartDataForRecharts[]>> => { \n    const response = await api.get<ApiResponse<ChartDataForRecharts[]>>(`/dashboard/charts?type=${type}`, { params: { period } });\n    return response.data;\n  },\n  getFinancialSummary: async (period: string = '30d'): Promise<ApiResponse<FinancialSummaryData>> => { \n    const response = await api.get<ApiResponse<FinancialSummaryData>>(\"/dashboard/stats/financial\", { params: { period } });\n    return response.data;\n  },\n  getServiceDistribution: async (period: string = '30d'): Promise<ApiResponse<ServiceDistributionData[]>> => { \n    const response = await api.get<ApiResponse<ServiceDistributionData[]>>(\"/dashboard/stats/service-distribution\", { params: { period } });\n    return response.data;\n  },\n}\n\nexport const polyclinicAPI = {\n  getAllPolyclinics: async (\n    page: number = 1, \n    limit: number = 10, \n    search: string = \"\", \n    department: string = \"\" \n  ): Promise<PolyclinicsApiResponse> => {\n    const response = await api.get<PolyclinicsApiResponse>(\"/polyclinics\", {\n      params: { page, limit, search, department }\n    });\n    return response.data;\n  },\n}\n\nexport const inventoryAPI = {\n  getInventoryItems: async (\n    page: number = 1, \n    limit: number = 10, \n    search: string = \"\", \n    category: string = \"\", \n    status: string = \"\", \n    sortBy: string = 'name',\n    sortOrder: 'asc' | 'desc' = 'asc'\n  ): Promise<InventoryApiResponse> => {\n    const response = await api.get<InventoryApiResponse>(\"/inventory\", {\n      params: { page, limit, search, category, status, sortBy, sortOrder }\n    });\n    return response.data;\n  },\n  getInventoryStats: async (): Promise<InventoryStatsApiResponse> => {\n    const response = await api.get<InventoryStatsApiResponse>(\"/inventory/stats\");\n    return response.data;\n  },\n  createInventoryItem: async (itemData: InventoryItemData): Promise<ApiResponse<InventoryItemData>> => {\n    const response = await api.post<ApiResponse<InventoryItemData>>(\"/inventory\", itemData);\n    return response.data;\n  },\n  updateInventoryItem: async (itemId: string, itemData: Partial<InventoryItemData>): Promise<ApiResponse<InventoryItemData>> => {\n    const response = await api.put<ApiResponse<InventoryItemData>>(`/inventory/${itemId}`, itemData);\n    return response.data;\n  },\n  deleteInventoryItem: async (itemId: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete<ApiResponse<null>>(`/inventory/${itemId}`);\n    return response.data;\n  },\n  updateStock: async (itemId: string, quantity: number, type: 'add' | 'subtract'): Promise<ApiResponse<InventoryItemData>> => {\n    const response = await api.put<ApiResponse<InventoryItemData>>(`/inventory/${itemId}/stock`, { quantity, type });\n    return response.data;\n  },\n  getLowStockAlerts: async (): Promise<ApiResponse<InventoryItemData[] & { summary: { total: number, critical: number }}>> => {\n    const response = await api.get<ApiResponse<InventoryItemData[] & { summary: { total: number, critical: number }}>>(\"/inventory/alerts/low-stock\");\n    return response.data;\n  }\n}\n\nexport const scheduleAPI = {\n  getAllSchedules: async (\n    page: number = 1,\n    limit: number = 10,\n    doctorId?: string,\n    polyclinicId?: string,\n    date?: string,\n    status?: string\n  ): Promise<ScheduleApiResponse> => {\n    const response = await api.get<ScheduleApiResponse>(\"/schedules\", {\n      params: { page, limit, doctorId, polyclinicId, date, status }\n    });\n    return response.data;\n  },\n  getScheduleById: async (id: string): Promise<SingleScheduleApiResponse> => {\n    const response = await api.get<SingleScheduleApiResponse>(`/schedules/${id}`);\n    return response.data;\n  },\n  createSchedule: async (scheduleData: Omit<ScheduleData, '_id' | 'scheduleId' | 'availableSlots' | 'bookedSlots' | 'createdAt' | 'updatedAt' | 'doctorName' | 'doctorSpecialization' | 'polyclinicName' | 'queues'>): Promise<ApiResponse<ScheduleData>> => {\n    const response = await api.post<ApiResponse<ScheduleData>>(\"/schedules\", scheduleData);\n    return response.data;\n  },\n  updateSchedule: async (id: string, scheduleData: Partial<Omit<ScheduleData, '_id' | 'scheduleId' | 'createdAt' | 'updatedAt' | 'doctorName' | 'doctorSpecialization' | 'polyclinicName' | 'queues'>>): Promise<ApiResponse<ScheduleData>> => {\n    const response = await api.put<ApiResponse<ScheduleData>>(`/schedules/${id}`, scheduleData);\n    return response.data;\n  },\n  deleteSchedule: async (id: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete<ApiResponse<null>>(`/schedules/${id}`);\n    return response.data;\n  },\n  getScheduleStats: async (): Promise<ScheduleStatsResponse> => {\n    console.warn(\"Schedule stats API is not fully implemented in backend.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: {\n        totalSchedules: 100,\n        activeSchedules: 80,\n        totalSlotsToday: 200,\n        bookedSlotsToday: 150,\n        availableSlotsToday: 50,\n        utilizationToday: 75,\n        doctorsOnDutyToday: 10,\n        newAppointmentsToday: 15,\n        averageWaitTimeToday: 20,\n      }\n    }), 500));\n  },\n}\n\nexport const doctorAPI = { \n  getDoctors: async (\n    page: number = 1,\n    limit: number = 10,\n    search: string = \"\",\n    specialization: string = \"\",\n    status: string = \"active\", \n    sortBy: string = 'name',\n    sortOrder: 'asc' | 'desc' = 'asc'\n  ): Promise<DoctorListApiResponse> => {\n    const response = await api.get<DoctorListApiResponse>(\"/doctors\", {\n      params: { page, limit, search, specialization, status, sortBy, sortOrder }\n    });\n    return response.data;\n  },\n  getDoctorById: async (id: string): Promise<ApiResponse<DoctorDataFromAdminAPI>> => {\n    const response = await api.get<ApiResponse<DoctorDataFromAdminAPI>>(`/doctors/${id}`);\n    return response.data;\n  }\n}\n\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}