{"ast":null,"code":"// apps/admin/frontend/src/services/api.ts\n\nimport axios from \"axios\";\nimport toast from \"react-hot-toast\";\n\n// ... (semua interface yang lain tidak berubah)\n// INTERFACES ...\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\",\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data, _error$response2;\n  const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || \"An error occurred\";\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    if (window.location.pathname !== '/login') {\n      window.location.href = \"/login\";\n    }\n    toast.error(\"Sesi berakhir. Silakan login kembali.\");\n  } else if (error.code !== \"ERR_CANCELED\") {\n    toast.error(message);\n  }\n  return Promise.reject(error);\n});\n\n// =========================================================\n// API SERVICES\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post(\"/auth/admin/login\", credentials);\n    return response.data;\n  },\n  demoLogin: async () => {\n    const response = await api.post(\"/auth/admin/demo-login\");\n    return response.data;\n  },\n  verifyToken: async () => {\n    const response = await api.get(\"/auth/admin/verify-token\");\n    return response.data;\n  },\n  updateProfile: async userData => {\n    const response = await api.put(\"/auth/admin/profile\", userData);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get(\"/auth/admin/profile\");\n    return response.data;\n  },\n  changePassword: async passwordData => {\n    const response = await api.put(\"/auth/admin/change-password\", passwordData);\n    return response.data;\n  }\n};\n\n// ... (patientAPI tidak berubah)\nexport const patientAPI = {\n  getPatients: async (page = 1, limit = 10, search = \"\", status = \"all\") => {\n    const response = await api.get(\"/patients\", {\n      params: {\n        page,\n        limit,\n        search,\n        status\n      }\n    });\n    return response.data;\n  },\n  getPatientStats: async () => {\n    const response = await api.get(\"/patients/stats\");\n    return response.data;\n  },\n  createPatient: async patientData => {\n    const response = await api.post(\"/patients\", patientData);\n    return response.data;\n  },\n  updatePatient: async (patientId, patientData) => {\n    const response = await api.put(`/patients/${patientId}`, patientData);\n    return response.data;\n  },\n  deletePatient: async patientId => {\n    const response = await api.delete(`/patients/${patientId}`);\n    return response.data;\n  },\n  getPatientById: async patientId => {\n    const response = await api.get(`/patients/${patientId}`);\n    return response.data;\n  }\n};\n\n// âœ… PERBAIKAN: dashboardAPI disesuaikan dengan rute baru di backend\nexport const dashboardAPI = {\n  // --- Rute untuk dashboard admin yang baru ---\n  getAdminDashboardOverview: async () => {\n    const response = await api.get(\"/dashboard/admin-overview\");\n    return response.data;\n  },\n  getPatientsPerWeek: async () => {\n    const response = await api.get(\"/dashboard/admin-charts/patients-per-week\");\n    return response.data;\n  },\n  getPatientsPerHour: async () => {\n    const response = await api.get(\"/dashboard/admin-charts/patients-per-hour\");\n    return response.data;\n  },\n  getAIInsights: async () => {\n    const response = await api.get(\"/dashboard/admin-charts/ai-insights\");\n    return response.data;\n  },\n  getSystemHealth: async () => {\n    const response = await api.get(\"/dashboard/system/health\"); // URL sudah benar\n    return response.data;\n  },\n  // --- Rute dashboard umum yang sudah ada ---\n  getOverview: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/overview\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  getChartData: async (type = 'weekly-patients', period = '30d') => {\n    const response = await api.get(`/dashboard/charts?type=${type}`, {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  getFinancialSummary: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/stats/financial\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  getServiceDistribution: async (period = '30d') => {\n    const response = await api.get(\"/dashboard/stats/service-distribution\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  }\n};\n\n// ... (sisa API calls seperti polyclinicAPI, inventoryAPI, dst tidak berubah)\nexport const polyclinicAPI = {\n  getAllPolyclinics: async (page = 1, limit = 10, search = \"\", department = \"\") => {\n    const response = await api.get(\"/polyclinics\", {\n      params: {\n        page,\n        limit,\n        search,\n        department\n      }\n    });\n    return response.data;\n  }\n};\nexport const inventoryAPI = {\n  getInventoryItems: async (page = 1, limit = 10, search = \"\", category = \"\", status = \"\", sortBy = 'name', sortOrder = 'asc') => {\n    const response = await api.get(\"/inventory\", {\n      params: {\n        page,\n        limit,\n        search,\n        category,\n        status,\n        sortBy,\n        sortOrder\n      }\n    });\n    return response.data;\n  },\n  getInventoryStats: async () => {\n    const response = await api.get(\"/inventory/stats\");\n    return response.data;\n  },\n  createInventoryItem: async itemData => {\n    const response = await api.post(\"/inventory\", itemData);\n    return response.data;\n  },\n  updateInventoryItem: async (itemId, itemData) => {\n    const response = await api.put(`/inventory/${itemId}`, itemData);\n    return response.data;\n  },\n  deleteInventoryItem: async itemId => {\n    const response = await api.delete(`/inventory/${itemId}`);\n    return response.data;\n  },\n  updateStock: async (itemId, quantity, type) => {\n    const response = await api.put(`/inventory/${itemId}/stock`, {\n      quantity,\n      type\n    });\n    return response.data;\n  },\n  getLowStockAlerts: async () => {\n    const response = await api.get(\"/inventory/alerts/low-stock\");\n    return response.data;\n  }\n};\nexport const scheduleAPI = {\n  getAllSchedules: async (page = 1, limit = 10, doctorId, polyclinicId, date, status) => {\n    const response = await api.get(\"/schedules\", {\n      params: {\n        page,\n        limit,\n        doctorId,\n        polyclinicId,\n        date,\n        status\n      }\n    });\n    return response.data;\n  },\n  getScheduleById: async id => {\n    const response = await api.get(`/schedules/${id}`);\n    return response.data;\n  },\n  createSchedule: async scheduleData => {\n    const response = await api.post(\"/schedules\", scheduleData);\n    return response.data;\n  },\n  updateSchedule: async (id, scheduleData) => {\n    const response = await api.put(`/schedules/${id}`, scheduleData);\n    return response.data;\n  },\n  deleteSchedule: async id => {\n    const response = await api.delete(`/schedules/${id}`);\n    return response.data;\n  },\n  getScheduleStats: async () => {\n    console.warn(\"Schedule stats API is not fully implemented in backend.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: {\n        totalSchedules: 100,\n        activeSchedules: 80,\n        totalSlotsToday: 200,\n        bookedSlotsToday: 150,\n        availableSlotsToday: 50,\n        utilizationToday: 75,\n        doctorsOnDutyToday: 10,\n        newAppointmentsToday: 15,\n        averageWaitTimeToday: 20\n      }\n    }), 500));\n  }\n};\nexport const doctorAPI = {\n  getDoctors: async (page = 1, limit = 10, search = \"\", specialization = \"\", status = \"active\", sortBy = 'name', sortOrder = 'asc') => {\n    const response = await api.get(\"/doctors\", {\n      params: {\n        page,\n        limit,\n        search,\n        specialization,\n        status,\n        sortBy,\n        sortOrder\n      }\n    });\n    return response.data;\n  },\n  getDoctorById: async id => {\n    const response = await api.get(`/doctors/${id}`);\n    return response.data;\n  }\n};\nexport const appointmentAPI = {\n  getAllAppointments: async (page = 1, limit = 10, status) => {\n    console.warn(\"API for getting all appointments is not yet implemented.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: [],\n      message: \"Mock data for all appointments.\"\n    }), 500));\n  },\n  getUpcomingAppointmentsAdmin: async () => {\n    console.warn(\"API for getting admin upcoming appointments is not yet implemented.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: [],\n      message: \"Mock data for admin upcoming appointments.\"\n    }), 500));\n  }\n};\nexport const medicalRecordAPI = {\n  getAllMedicalRecordsAdmin: async () => {\n    console.warn(\"API for getting all medical records for admin is not yet implemented.\");\n    return new Promise(resolve => setTimeout(() => resolve({\n      success: true,\n      data: [],\n      message: \"Mock data for admin medical records.\"\n    }), 500));\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","toast","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response$data","_error$response2","message","data","status","removeItem","window","location","pathname","href","code","authAPI","login","credentials","post","demoLogin","verifyToken","get","updateProfile","userData","put","getProfile","changePassword","passwordData","patientAPI","getPatients","page","limit","search","params","getPatientStats","createPatient","patientData","updatePatient","patientId","deletePatient","delete","getPatientById","dashboardAPI","getAdminDashboardOverview","getPatientsPerWeek","getPatientsPerHour","getAIInsights","getSystemHealth","getOverview","period","getChartData","type","getFinancialSummary","getServiceDistribution","polyclinicAPI","getAllPolyclinics","department","inventoryAPI","getInventoryItems","category","sortBy","sortOrder","getInventoryStats","createInventoryItem","itemData","updateInventoryItem","itemId","deleteInventoryItem","updateStock","quantity","getLowStockAlerts","scheduleAPI","getAllSchedules","doctorId","polyclinicId","date","getScheduleById","id","createSchedule","scheduleData","updateSchedule","deleteSchedule","getScheduleStats","console","warn","resolve","setTimeout","success","totalSchedules","activeSchedules","totalSlotsToday","bookedSlotsToday","availableSlotsToday","utilizationToday","doctorsOnDutyToday","newAppointmentsToday","averageWaitTimeToday","doctorAPI","getDoctors","specialization","getDoctorById","appointmentAPI","getAllAppointments","getUpcomingAppointmentsAdmin","medicalRecordAPI","getAllMedicalRecordsAdmin"],"sources":["C:/Sehatify/apps/admin/frontend/src/services/api.ts"],"sourcesContent":["// apps/admin/frontend/src/services/api.ts\n\nimport axios, { type AxiosInstance, type AxiosResponse, type AxiosError } from \"axios\"\nimport toast from \"react-hot-toast\"\nimport type { User, AuthResponse, LoginCredentials, ChangePasswordData, ApiResponse } from \"../types\" \n\n// ... (semua interface yang lain tidak berubah)\n// INTERFACES ...\nexport interface DoctorDataFromAdminAPI { _id: string; name: string; specialization: string; employeeId?: string; phone?: string; email?: string; licenseNumber?: string; joinDate?: string; status?: 'Active' | 'On Leave' | 'Inactive'; isActive?: boolean; }\nexport interface DoctorListApiResponse { success: boolean; data: DoctorDataFromAdminAPI[]; pagination: { currentPage: number; totalPages: number; total: number; }; }\nexport interface PolyclinicData { _id: string; polyclinicId: string; name: string; department: string; description?: string; operatingHours?: { [day: string]: { start?: string; end?: string; isOpen?: boolean }; }; capacity?: { maxPatientsPerDay?: number; maxPatientsPerHour?: number; }; facilities?: string[]; location?: { building?: string; floor?: string; room?: string; }; assignedDoctors?: Array<{ _id?: string; doctorId?: string | DoctorDataFromAdminAPI; schedule?: Array<{ day?: string; startTime?: string; endTime?: string; }>; }>; status: 'Active' | 'Maintenance' | 'Closed'; stats?: { monthlyVisits: number; activeDoctors: number; }; price?: number; }\nexport interface PolyclinicsApiResponse { success: boolean; data: PolyclinicData[]; pagination: { currentPage: number; totalPages: number; total: number }; }\nexport interface PolyclinicStatsData { totalServices: number; activeToday: number; averageWaitTime: number; }\nexport interface PolyclinicStatsApiResponse { success: boolean; data: PolyclinicStatsData; }\nexport interface PatientData { _id: string; patientId?: string; fullName: string; nik?: string; dateOfBirth: string; gender: 'Laki-laki' | 'Perempuan'; phone: string; email?: string; address?: { street?: string; city?: string; province?: string; postalCode?: string; }; bloodType?: 'A+' | 'A-' | 'B+' | 'B-' | 'AB+' | 'AB-' | 'O+' | 'O-'; allergies?: string[]; emergencyContact?: { name?: string; relationship?: string; phone?: string; }; registrationDate?: string; status?: 'Active' | 'Inactive'; lastVisit?: string; age?: number; recentVisits?: any[]; lifetimeValue?: number; createdAt?: string; updatedAt?: string; }\nexport interface PatientStatsData { total: number; active: number; new: number; genderStats: Array<{ _id: string; count: number }>; }\nexport interface PatientsApiResponse { success: boolean; data: PatientData[]; pagination: { currentPage: number; totalPages: number; total: number }; }\nexport interface PatientStatsApiResponse { success: boolean; data: PatientStatsData; }\nexport interface ScheduleData { _id: string; scheduleId: string; doctorId: string | DoctorDataFromAdminAPI; polyclinicId: string | PolyclinicData; date: string; startTime: string; endTime: string; totalSlots: number; bookedSlots: number; availableSlots: number; status: 'Active' | 'Cancelled' | 'Completed'; notes?: string; estimatedWaitTime?: number; createdAt?: string; updatedAt?: string; doctorName?: string; doctorSpecialization?: string; polyclinicName?: string; queues?: Array<{ _id: string; patientId: { fullName: string; patientId?: string } | null; queueNumber: number; status: string; }>; }\nexport interface ScheduleApiResponse { success: boolean; data: ScheduleData[]; pagination: { currentPage: number; totalPages: number; total: number }; }\nexport interface SingleScheduleApiResponse { success: boolean; data: ScheduleData; }\nexport interface ScheduleStatsResponse { success: boolean; data: { totalSchedules: number; activeSchedules: number; totalSlotsToday: number; bookedSlotsToday: number; availableSlotsToday: number; utilizationToday: number; doctorsOnDutyToday: number; newAppointmentsToday: number; averageWaitTimeToday: number; } }\nexport interface InventoryItemData { _id: string; itemId: string; name: string; category: string; currentStock: number; minimumStock: number; unit: string; unitPrice: number; status: 'Available' | 'Low Stock' | 'Out of Stock'; lastRestockDate?: string; createdAt?: string; updatedAt?: string; }\nexport interface InventoryStatsData { total: number; lowStock: number; outOfStock: number; totalValue: number; }\nexport interface InventoryApiResponse { success: boolean; data: InventoryItemData[]; pagination: { currentPage: number; totalPages: number; total: number }; }\nexport interface InventoryStatsApiResponse { success: boolean; data: InventoryStatsData; }\nexport interface ChartDataForRecharts { name: string; value: number; [key: string]: any; }\nexport interface FinancialSummaryData { totalRevenue: number; operationalCost: number; profitMargin: number; patientSatisfaction: number; }\nexport interface ServiceDistributionData { name: string; value: number; color?: string; }\nexport interface DashboardOverviewApiData { totalVisits?: number; averageDaily?: number; occupancyRate?: number; totalPatients?: number; erAdmissions?: number; bloodUnitsOminus?: number; availableBeds?: number; patientTrendData?: ChartDataForRecharts[]; patientPerHourData?: ChartDataForRecharts[]; aiInsightSummary?: string; aiRecommendations?: { id: string; text: string; priority: \"high\" | \"medium\" | \"low\" }[]; todayAbsorption?: { bloodOminus?: number; patientsIncreased?: number; nightShiftNurses?: number; } }\nexport interface Appointment { _id: string; queueId: string; patientId: string; doctorId: string; polyclinicId: string; scheduleId: string; queueNumber: number; queueDate: string; appointmentTime?: string; status: 'Waiting' | 'In Progress' | 'Completed' | 'Cancelled' | 'No Show'; priority: 'Normal' | 'Urgent' | 'Emergency'; notes?: string; complaints?: string; createdAt?: string; updatedAt?: string; doctor?: { _id: string; name: string; specialization: string }; polyclinic?: { _id: string; name: string }; }\nexport interface MedicalRecord { id: string; patientId: string; visitDate: string; doctorName: string; diagnosis: string; treatments: string[]; prescriptions: string[]; labResults?: { bloodPressure?: string; heartRate?: string; temperature?: string; weight?: string; }; notes?: string; }\n\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:5000/api/v1\", \n  timeout: 10000,\n  headers: { \"Content-Type\": \"application/json\" },\n})\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    const message = (error.response?.data as any)?.message || error.message || \"An error occurred\"\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      if (window.location.pathname !== '/login') {\n        window.location.href = \"/login\"\n      }\n      toast.error(\"Sesi berakhir. Silakan login kembali.\")\n    } else if (error.code !== \"ERR_CANCELED\") {\n        toast.error(message)\n    }\n    return Promise.reject(error)\n  },\n)\n\n// =========================================================\n// API SERVICES\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/login\", credentials) \n    return response.data\n  },\n  demoLogin: async (): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/admin/demo-login\") \n    return response.data\n  },\n  verifyToken: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/verify-token\")\n    return response.data;\n  },\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.put<ApiResponse<{ user: User }>>(\"/auth/admin/profile\", userData)\n    return response.data;\n  },\n  getProfile: async (): Promise<ApiResponse<{ user: User }>> => {\n    const response = await api.get<ApiResponse<{ user: User }>>(\"/auth/admin/profile\")\n    return response.data;\n  },\n  changePassword: async (passwordData: ChangePasswordData): Promise<ApiResponse<null>> => {\n    const response = await api.put<ApiResponse<null>>(\"/auth/admin/change-password\", passwordData);\n    return response.data;\n  }\n}\n\n// ... (patientAPI tidak berubah)\nexport const patientAPI = { getPatients: async (page: number = 1, limit: number = 10, search: string = \"\", status: string = \"all\"): Promise<PatientsApiResponse> => { const response = await api.get<PatientsApiResponse>(\"/patients\", { params: { page, limit, search, status } }); return response.data; }, getPatientStats: async (): Promise<PatientStatsApiResponse> => { const response = await api.get<PatientStatsApiResponse>(\"/patients/stats\"); return response.data; }, createPatient: async (patientData: Omit<PatientData, '_id' | 'patientId' | 'registrationDate' | 'status' | 'lastVisit' | 'age' | 'createdAt' | 'updatedAt'>): Promise<ApiResponse<PatientData>> => { const response = await api.post<ApiResponse<PatientData>>(\"/patients\", patientData); return response.data; }, updatePatient: async (patientId: string, patientData: Partial<PatientData>): Promise<ApiResponse<PatientData>> => { const response = await api.put<ApiResponse<PatientData>>(`/patients/${patientId}`, patientData); return response.data; }, deletePatient: async (patientId: string): Promise<ApiResponse<null>> => { const response = await api.delete<ApiResponse<null>>(`/patients/${patientId}`); return response.data; }, getPatientById: async (patientId: string): Promise<ApiResponse<PatientData>> => { const response = await api.get<ApiResponse<PatientData>>(`/patients/${patientId}`); return response.data; } }\n\n// âœ… PERBAIKAN: dashboardAPI disesuaikan dengan rute baru di backend\nexport const dashboardAPI = {\n  // --- Rute untuk dashboard admin yang baru ---\n  getAdminDashboardOverview: async (): Promise<ApiResponse<DashboardOverviewApiData>> => {\n    const response = await api.get<ApiResponse<DashboardOverviewApiData>>(\"/dashboard/admin-overview\"); \n    return response.data;\n  },\n  getPatientsPerWeek: async (): Promise<ApiResponse<ChartDataForRecharts[]>> => {\n    const response = await api.get<ApiResponse<ChartDataForRecharts[]>>(\"/dashboard/admin-charts/patients-per-week\"); \n    return response.data;\n  },\n  getPatientsPerHour: async (): Promise<ApiResponse<ChartDataForRecharts[]>> => {\n    const response = await api.get<ApiResponse<ChartDataForRecharts[]>>(\"/dashboard/admin-charts/patients-per-hour\"); \n    return response.data;\n  },\n  getAIInsights: async (): Promise<ApiResponse<{ summary: string; recommendations: { id: string; text: string; priority: \"high\" | \"medium\" | \"low\" }[] }>> => {\n    const response = await api.get<ApiResponse<{ summary: string; recommendations: { id: string; text: string; priority: \"high\" | \"medium\" | \"low\" }[] }>>(\"/dashboard/admin-charts/ai-insights\"); \n    return response.data;\n  },\n  getSystemHealth: async (): Promise<ApiResponse<any>> => { \n    const response = await api.get<ApiResponse<any>>(\"/dashboard/system/health\"); // URL sudah benar\n    return response.data;\n  },\n\n  // --- Rute dashboard umum yang sudah ada ---\n  getOverview: async (period: string = '30d'): Promise<ApiResponse<DashboardOverviewApiData>> => { \n    const response = await api.get<ApiResponse<DashboardOverviewApiData>>(\"/dashboard/overview\", { params: { period } });\n    return response.data;\n  },\n  getChartData: async (type: string = 'weekly-patients', period: string = '30d'): Promise<ApiResponse<ChartDataForRecharts[]>> => { \n    const response = await api.get<ApiResponse<ChartDataForRecharts[]>>(`/dashboard/charts?type=${type}`, { params: { period } });\n    return response.data;\n  },\n  getFinancialSummary: async (period: string = '30d'): Promise<ApiResponse<FinancialSummaryData>> => { \n    const response = await api.get<ApiResponse<FinancialSummaryData>>(\"/dashboard/stats/financial\", { params: { period } });\n    return response.data;\n  },\n  getServiceDistribution: async (period: string = '30d'): Promise<ApiResponse<ServiceDistributionData[]>> => { \n    const response = await api.get<ApiResponse<ServiceDistributionData[]>>(\"/dashboard/stats/service-distribution\", { params: { period } });\n    return response.data;\n  },\n}\n\n// ... (sisa API calls seperti polyclinicAPI, inventoryAPI, dst tidak berubah)\nexport const polyclinicAPI = { getAllPolyclinics: async (page: number = 1, limit: number = 10, search: string = \"\", department: string = \"\"): Promise<PolyclinicsApiResponse> => { const response = await api.get<PolyclinicsApiResponse>(\"/polyclinics\", { params: { page, limit, search, department } }); return response.data; }, }\nexport const inventoryAPI = { getInventoryItems: async (page: number = 1, limit: number = 10, search: string = \"\", category: string = \"\", status: string = \"\", sortBy: string = 'name', sortOrder: 'asc' | 'desc' = 'asc'): Promise<InventoryApiResponse> => { const response = await api.get<InventoryApiResponse>(\"/inventory\", { params: { page, limit, search, category, status, sortBy, sortOrder } }); return response.data; }, getInventoryStats: async (): Promise<InventoryStatsApiResponse> => { const response = await api.get<InventoryStatsApiResponse>(\"/inventory/stats\"); return response.data; }, createInventoryItem: async (itemData: InventoryItemData): Promise<ApiResponse<InventoryItemData>> => { const response = await api.post<ApiResponse<InventoryItemData>>(\"/inventory\", itemData); return response.data; }, updateInventoryItem: async (itemId: string, itemData: Partial<InventoryItemData>): Promise<ApiResponse<InventoryItemData>> => { const response = await api.put<ApiResponse<InventoryItemData>>(`/inventory/${itemId}`, itemData); return response.data; }, deleteInventoryItem: async (itemId: string): Promise<ApiResponse<null>> => { const response = await api.delete<ApiResponse<null>>(`/inventory/${itemId}`); return response.data; }, updateStock: async (itemId: string, quantity: number, type: 'add' | 'subtract'): Promise<ApiResponse<InventoryItemData>> => { const response = await api.put<ApiResponse<InventoryItemData>>(`/inventory/${itemId}/stock`, { quantity, type }); return response.data; }, getLowStockAlerts: async (): Promise<ApiResponse<InventoryItemData[] & { summary: { total: number, critical: number }}>> => { const response = await api.get<ApiResponse<InventoryItemData[] & { summary: { total: number, critical: number }}>>(\"/inventory/alerts/low-stock\"); return response.data; } }\nexport const scheduleAPI = { getAllSchedules: async (page: number = 1, limit: number = 10, doctorId?: string, polyclinicId?: string, date?: string, status?: string): Promise<ScheduleApiResponse> => { const response = await api.get<ScheduleApiResponse>(\"/schedules\", { params: { page, limit, doctorId, polyclinicId, date, status } }); return response.data; }, getScheduleById: async (id: string): Promise<SingleScheduleApiResponse> => { const response = await api.get<SingleScheduleApiResponse>(`/schedules/${id}`); return response.data; }, createSchedule: async (scheduleData: Omit<ScheduleData, '_id' | 'scheduleId' | 'availableSlots' | 'bookedSlots' | 'createdAt' | 'updatedAt' | 'doctorName' | 'doctorSpecialization' | 'polyclinicName' | 'queues'>): Promise<ApiResponse<ScheduleData>> => { const response = await api.post<ApiResponse<ScheduleData>>(\"/schedules\", scheduleData); return response.data; }, updateSchedule: async (id: string, scheduleData: Partial<Omit<ScheduleData, '_id' | 'scheduleId' | 'createdAt' | 'updatedAt' | 'doctorName' | 'doctorSpecialization' | 'polyclinicName' | 'queues'>>): Promise<ApiResponse<ScheduleData>> => { const response = await api.put<ApiResponse<ScheduleData>>(`/schedules/${id}`, scheduleData); return response.data; }, deleteSchedule: async (id: string): Promise<ApiResponse<null>> => { const response = await api.delete<ApiResponse<null>>(`/schedules/${id}`); return response.data; }, getScheduleStats: async (): Promise<ScheduleStatsResponse> => { console.warn(\"Schedule stats API is not fully implemented in backend.\"); return new Promise(resolve => setTimeout(() => resolve({ success: true, data: { totalSchedules: 100, activeSchedules: 80, totalSlotsToday: 200, bookedSlotsToday: 150, availableSlotsToday: 50, utilizationToday: 75, doctorsOnDutyToday: 10, newAppointmentsToday: 15, averageWaitTimeToday: 20, } }), 500)); }, }\nexport const doctorAPI = { getDoctors: async (page: number = 1, limit: number = 10, search: string = \"\", specialization: string = \"\", status: string = \"active\", sortBy: string = 'name', sortOrder: 'asc' | 'desc' = 'asc'): Promise<DoctorListApiResponse> => { const response = await api.get<DoctorListApiResponse>(\"/doctors\", { params: { page, limit, search, specialization, status, sortBy, sortOrder } }); return response.data; }, getDoctorById: async (id: string): Promise<ApiResponse<DoctorDataFromAdminAPI>> => { const response = await api.get<ApiResponse<DoctorDataFromAdminAPI>>(`/doctors/${id}`); return response.data; } }\nexport const appointmentAPI = { getAllAppointments: async (page: number = 1, limit: number = 10, status?: string): Promise<ApiResponse<Appointment[]>> => { console.warn(\"API for getting all appointments is not yet implemented.\"); return new Promise(resolve => setTimeout(() => resolve({ success: true, data: [] as Appointment[], message: \"Mock data for all appointments.\" }), 500)); }, getUpcomingAppointmentsAdmin: async (): Promise<ApiResponse<Appointment[]>> => { console.warn(\"API for getting admin upcoming appointments is not yet implemented.\"); return new Promise(resolve => setTimeout(() => resolve({ success: true, data: [] as Appointment[], message: \"Mock data for admin upcoming appointments.\" }), 500)); } }\nexport const medicalRecordAPI = { getAllMedicalRecordsAdmin: async (): Promise<ApiResponse<MedicalRecord[]>> => { console.warn(\"API for getting all medical records for admin is not yet implemented.\"); return new Promise(resolve => setTimeout(() => resolve({ success: true, data: [] as MedicalRecord[], message: \"Mock data for admin medical records.\" }), 500)); } }\n\n\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}